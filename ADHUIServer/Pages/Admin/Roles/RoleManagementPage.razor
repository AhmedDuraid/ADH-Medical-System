@page "/admin/users/role"

@using UIDataAccess.Library.Models.Admin;
@using ADHUIServer.Components;

@inject UIDataAccess.Library.DataAccess.Admin.IRoleDataAccess _roleDataAccess
@inject Blazored.SessionStorage.ISessionStorageService _ISessionStorageService
@*TODO>>> Handling the error case*@

@*Check >>> the update modle need to click two time to update, check why. it can be because the modles in this page*@

<AuthorizeView Roles="Admin">
    <Authorized>
        <h3>RoleManagementPage</h3>


        @if (IsThereRole)
        {
            <RoleTable Role="RolesList" SelectedRole="GetSelectedRole" />

            @if (SelectedRole != null && ShowUpdateForm)
            {

                <UpdateRoleForm UserRole="SelectedRole" Action="RoleAction" UpdatedRole="GetUpdatedRole" />
            }

            @if (ShowAddRoleForm)
            {
                <AddRoleForm RoleInformation="SendAddRoleRequest" />
            }
        }
        <button class="btn btn-primary" @onclick="CloseUpdateFrom">
            Add New
        </button>
    </Authorized>
</AuthorizeView>




@code {

    private List<RoleModle> RolesList;
    private RoleModle SelectedRole;
    private RoleModle UpdatedRole;
    private HttpInfoModel HttpInfo;
    private string Token;

    private bool ShowUpdateForm = false;
    private bool ShowAddRoleForm = false;
    private bool IsThereRole = false;

    protected async override Task OnInitializedAsync()
    {
        Token = await _ISessionStorageService.GetItemAsync<string>("Token");

        (RolesList, HttpInfo) = await _roleDataAccess.GetRoles(Token);

        if (RolesList.Count > 0)
        {
            IsThereRole = true;
        }

    }

    private void CloseUpdateFrom()
    {
        ShowUpdateForm = false;
        ShowAddRoleForm = true;
    }

    private void GetSelectedRole(RoleModle role)
    {
        SelectedRole = role;
        ShowUpdateForm = true;
        ShowAddRoleForm = false;
    }

    private void GetUpdatedRole(RoleModle updateRole)
    {
        UpdatedRole = updateRole;
    }

    private async void RoleAction(string action)
    {
        // send Http request to the Api
        ShowAddRoleForm = false;
        switch (action)
        {
            case "delete":
                {
                    // send delete request
                    await _roleDataAccess.DeleteRole(Token, SelectedRole.Id);
                    ShowUpdateForm = false;


                    break;
                }
            case "update":
                {
                    // send Update request to the api
                    ShowUpdateForm = false;
                    await _roleDataAccess.UpdateRole(Token, UpdatedRole);

                    break;
                }

        }
        (RolesList, HttpInfo) = await _roleDataAccess.GetRoles(Token);

        StateHasChanged();
    }

    private async void SendAddRoleRequest(RoleModle role)
    {
        // send request to the api to add the enterd role
        ShowUpdateForm = false;

        await _roleDataAccess.AddRole(Token, role.Name);
        (RolesList, HttpInfo) = await _roleDataAccess.GetRoles(Token);
        ShowUpdateForm = false;
        ShowAddRoleForm = false;
        SelectedRole = null;
        StateHasChanged();

    }

}

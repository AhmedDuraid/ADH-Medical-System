@page "/login"

@using ADHUIServer.Models
@using ADHUIServer.Handlers
@using ADHUIServer.Models.Users


@inject ILoginAccess ILoginValidation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager



<div class="container">
    <div class="row">
        <div class="col">
            <h3>Login</h3>

        </div>
    </div>
    <EditForm class="form-group" Model="@loginModle" OnValidSubmit="@SubmitLoginForm">
        @*<FluentValidationValidator />
            <ValidationSummary />*@

        <div class="row">
            <div class="col">
                <p>
                    <InputText id="userName"
                               @bind-Value="@loginModle.UserName"
                               placeholder="UserName"
                               class="form-control" />
                </p>
            </div>
            <div class="col">
                <p>
                    <InputText id="password"
                               class="form-control"
                               @bind-Value="@loginModle.Password"
                               placeholder="Password"
                               type="password" />
                </p>
            </div>
            <div class="col">
                <button class="btn btn-primary" type="submit">Submit</button>
            </div>
        </div>
        <div class="row">

            <div class="col">
                @if (HttpError)
                {
                    <p>@userLoginInformationModel.Error.Message</p>

                }
            </div>
            <div class="col">
                @if (Loading)
                {
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>

                }
            </div>
        </div>







    </EditForm>
</div>

@code {

    private LoginModle loginModle = new LoginModle();
    private UserLoginInformationModel userLoginInformationModel = new UserLoginInformationModel();
    private bool HttpError = false;
    private bool Loading = false;


    private async Task SubmitLoginForm()
    {
        HttpError = false;
        Loading = true;

        // userLoginInformationModel = await ILoginValidation.GetUserToken(loginModle.UserName, loginModle.Password);

        // for testing
        userLoginInformationModel = await ILoginValidation.GetUserToken("TestUser", "Password123.");

        if (userLoginInformationModel.Error.StatusCode == System.Net.HttpStatusCode.OK)
        {
            HttpError = false;

            ((CustomAuthenticationStateProvider)AuthenticationStateProvider)
            .AuthenticatedUser(userLoginInformationModel.Access_Token, userLoginInformationModel.UserName);

            NavigationManager.NavigateTo("/");

            Loading = false;
        }

        if (userLoginInformationModel.Error.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Loading = false;
            HttpError = true;
        }
        else
        {
            Loading = false;
            HttpError = true;
            userLoginInformationModel.Error.Message = "There is Problem";

        }



    }
}


@using ADHUIServer.Models.Role
@using ADHUIServer.Models

@inject IRoleDataAccess _roleDataAccess
@inject Blazored.SessionStorage.ISessionStorageService _ISessionStorageService

<div class="container">
    <div class="row">
        <div class="col">
            <h3>Roles</h3>
        </div>
    </div>


    @if (Loading)
    {
        <div class="row">
            <div class="col">
                <Spinner />
            </div>
        </div>
    }
    else
    {

        @if (RolesList != null)
        {
            <div class="row">
                @foreach (var item in RolesList)
                {
                    <div class="col-3 m-1">
                        <div class="card border-primary">
                            <div class="card-header border-primary bg-white">
                                @item.Name
                            </div>

                            <div class="card-body border-primary bg-white">
                                <p class="card-text">
                                    <span class="font-weight-bold">
                                        Role Id:
                                    </span>  @item.Id
                                </p>
                                <p class="card-text">
                                    <span class="font-weight-bold">
                                        Role Name:
                                    </span>  @item.Name
                                </p>
                            </div>

                            <div class="card-footer border-primary bg-white">
                                <button class="btn btn-warning"
                                        @onclick="@(()=> UpdateSelectRole(item))">
                                    Update
                                </button>
                                <button class="btn btn-danger"
                                        @onclick="@(e=>DeleteRole(item.Id))">
                                    DELETE
                                </button>
                            </div>

                        </div>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col m-4">
                    <button class="btn btn-primary" @onclick="@ShowEditFormForNew">Add New </button>
                </div>
            </div>
        }
        else
        {
            <h1>There is no Role</h1>
        }



        @if (FromEdit)
        {
            <EditForm Model="SelectedRole">
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <InputText @bind-Value="SelectedRole.Id"
                                       placeholder="Id"
                                       class="form-control"
                                       disabled="@true"
                                       id="IdInput" />
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <InputText @onchange="@((e)=>SelectedRole.Name = e.Value.ToString())"
                                       @bind-Value="SelectedRole.Name"
                                       placeholder="Role Name"
                                       class="form-control"
                                       id="NameInput" />
                            @if (HttpInfo.StatusCode != System.Net.HttpStatusCode.OK)
                            {
                                <small class="form-text text-muted">@HttpInfo.Message</small>
                            }

                        </div>
                    </div>
                    <div class="col">
                        @if (IsNew)
                        {
                            <button class="btn btn-primary"
                                    @onclick="AddNewRole">
                                Add Role
                            </button>

                        }
                        else
                        {
                            <button class="btn btn-warning"
                                    @onclick="UpdateRole">
                                Send Update
                            </button>

                        }


                    </div>
                </div>
            </EditForm>
        }

    }
</div>

@code {


    [Parameter]
    public string Token { get; set; }

    private List<RoleModel> RolesList = new List<RoleModel>();
    private RoleModel SelectedRole = new RoleModel();
    private HttpInfoModel HttpInfo = new HttpInfoModel();

    private bool Loading = true;
    private bool FromEdit = false;
    private bool IsNew;

    protected async override Task OnInitializedAsync()
    {
        (RolesList, HttpInfo) = await _roleDataAccess.GetRoles(Token);
        Loading = false;
    }

    private void UpdateSelectRole(RoleModel role)
    {
        SelectedRole = role;
        IsNew = false;
        FromEdit = true;
    }

    private async void DeleteRole(string id)
    {
        await _roleDataAccess.DeleteRole(Token, id);
        UpdateRolesTable();
    }

    private async void UpdateRole()
    {
        await _roleDataAccess.UpdateRole(Token, SelectedRole);
        UpdateRolesTable();

    }


    private async void AddNewRole()
    {

        var task = await _roleDataAccess.AddRole(Token, SelectedRole.Name);
        UpdateRolesTable();
    }

    private void ShowEditFormForNew()
    {
        SelectedRole = new RoleModel();
        IsNew = true;
        FromEdit = true;
    }

    private async void UpdateRolesTable()
    {
        Loading = true;
        FromEdit = false;
        RolesList = new List<RoleModel>();
        (RolesList, HttpInfo) = await _roleDataAccess.GetRoles(Token);
        Loading = false;
        StateHasChanged();
    }
}
